	First of all, I've divided the task into two questions:
	- How to verify that the sphere would intersect points in the cloud?
	- How to restrict considered space so we don't go through the all points of it unnecessary?

	To solve first problem, I've found that the movement of the sphere comes down to a model that contains a
line segment (which is given by start and end points) and a radius of this sphere.

	The easiest meaningful way to restrict space is to describe parallelepiped about the surface of moving sphere.
I've done it by calculating two diagonally opposing points of parallelepiped by subtracting and adding radius 
to a highest and lowest points of segment respectively. It is done in Builder class inside of a SphereBorder.

	After that, I run three cycles on three coordinates to check through all of the points if sphere intersects them. 
I get the initial and final values from the SphereBorder class.

	In order to check points, I checked sign of scalar products of two pairs of vectors, made from an end, start and checked point.
First pair begins at end point and second begins at start point of sphere. If one of them is negative, 
the distance from point to a segment will be calculated as the distance between checked point and corresponding end or start pont.

	When both of the products are positive, the desired distance will be calculated as the distance from checked point to the line.

	Distance from point to point is calculated as module of difference between theese points 
(Implementation: PointToPointDestination function in CalcSphereMovement.cpp).
	Distance from point to line is calculated as module of vector product divided by a length of a segment.
(Implementation: PointToLineDestination function in CalcSphereMovement.cpp).

	After distance is calculated we check it and if it less or equal to a sphere radius then we write it to a file(function PrintPoint);
